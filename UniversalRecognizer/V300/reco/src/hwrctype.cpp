/***************************************************************************************
 *
 *  WRITEPAD(r): Handwriting Recognition Engine (HWRE) and components.
 *  Copyright (c) 2001-2016 PhatWare (r) Corp. All rights reserved.
 *
 *  Licensing and other inquires: <developer@phatware.com>
 *  Developer: Stan Miasnikov, et al. (c) PhatWare Corp. <http://www.phatware.com>
 *
 *  WRITEPAD HWRE is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  THE MATERIAL EMBODIED ON THIS SOFTWARE IS PROVIDED TO YOU "AS-IS"
 *  AND WITHOUT WARRANTY OF ANY KIND, EXPRESS, IMPLIED OR OTHERWISE,
 *  INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY OR
 *  FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL PHATWARE CORP.
 *  BE LIABLE TO YOU OR ANYONE ELSE FOR ANY DIRECT, SPECIAL, INCIDENTAL,
 *  INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER,
 *  INCLUDING WITHOUT LIMITATION, LOSS OF PROFIT, LOSS OF USE, SAVINGS
 *  OR REVENUE, OR THE CLAIMS OF THIRD PARTIES, WHETHER OR NOT PHATWARE CORP.
 *  HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS, HOWEVER CAUSED AND ON
 *  ANY THEORY OF LIABILITY, ARISING OUT OF OR IN CONNECTION WITH THE
 *  POSSESSION, USE OR PERFORMANCE OF THIS SOFTWARE.
 *  See the GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with WritePad.  If not, see <http://www.gnu.org/licenses/>.
 *
 **************************************************************************************/

#include "bastypes.h"
#include <ctype.h>
#include "zctype.h"

/*******************************************************************/

#define _2UC(n) (unsigned int)((n)&0x00ff)
#define _CHECK_RANGE(n) ((n) >= 0 && (n) <= 0xff)
#define _SEEK_RANGE  0x100
#define _ZTERM  '\0'

#define True 1
#define False 0

#ifndef _UPPER
#define _UPPER      0x1     /* upper case letter */
#define _LOWER      0x2     /* lower case letter */
#define _DIGIT      0x4     /* digit[0-9] */
#define _SPACE      0x8     /* tab, carriage return, newline, */
                            /* vertical tab or form feed */
#endif // _UPPER

#define _PUNCT      0x10    /* punctuation character */
#define _CONTROL    0x20    /* control character */
#define _BLANK      0x40    /* space char */
#define _HEX        0x80    /* hexadecimal digit */

static RECO_DATA unsigned char  _xctype[] =
{
    0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //x00
    0x20, 0x60, 0x60, 0x20, 0x60, 0x60, 0x20, 0x20,  //x08
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //x10
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //x18
    0x48, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,  //x20
    0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,  //x28
    0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84,  //x30
    0x84, 0x84, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,  //x38
    0x10, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x01,  //x40
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,  //x48
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,  //x50
    0x01, 0x01, 0x01, 0x10, 0x10, 0x10, 0x10, 0x10,  //x58
    0x10, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x02,  //x60
    0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,  //x68
    0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,  //x70
    0x02, 0x02, 0x02, 0x10, 0x10, 0x10, 0x10, 0x00,  //x78
    
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //x80//128
    0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00,  //x88//136
    0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  //x90//144
    0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01,  //x98//152
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //xA0//160
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //xA8//168
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //xB0//176
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //xB8//184
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,  //xC0//192
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,  //xC8//200
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00,  //xD0//208
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x02,  //xD8//216
    0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,  //xE0//224
    0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,  //xE8//232
    0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00,  //xF0//240
    0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x02   //xF8//248
};

/*******************************************************************/

static RECO_DATA unsigned char  _xupper[] =
{
#if !HALF_TABLE
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,  //x00
    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,  //x08
    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,  //x10
    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,  //x18
    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,  //x20
    0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,  //x28
    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,  //x30
    0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,  //x38
    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,  //x40
    0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,  //x48
    0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,  //x50
    0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,  //x58
    0x60, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,  //x60
    0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,  //x68
    0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,  //x70
    0x58, 0x59, 0x5a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,  //x78
#endif
    0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,  //x80//128
    0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,  //x88//136
    0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,  //x90//144
    0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,  //x98//152
    0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,  //xA0//160
    0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,  //xA8//168
    0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7,  //xB0//176
    0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,  //xB8//184
    0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,  //xC0//192
    0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,  //xC8//200
    0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7,  //xD0//208
    0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,  //xD8//216
    0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,  //xE0//224
    0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,  //xE8//232
    0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7,  //xF0//240
    0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xfe, 0x9f   //xF8//248
};

/*******************************************************************/

static RECO_DATA unsigned char  _xlower [] =
{
#if !HALF_TABLE
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,   //x00
    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,   //x08
    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,   //x10
    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,   //x18
    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,   //x20
    0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,   //x28
    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,   //x30
    0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,   //x38
    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,   //x40
    0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,   //x48
    0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,   //x50
    0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,   //x58
    0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,   //x60
    0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,   //x68
    0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,   //x70
    0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,   //x78
#endif
    0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,  //x80//128
    0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,  //x88//136
    0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,  //x90//144
    0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0xff,  //x98//152
    0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,  //xA0//160
    0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,  //xA8//168
    0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7,  //xB0//176
    0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,  //xB8//184
    0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7,  //xC0//192
    0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,  //xC8//200
    0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,  //xD0//208
    0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xde, 0xff,  //xD8//216
    0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7,  //xE0//224
    0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,  //xE8//232
    0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,  //xF0//240
    0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff   //xF8//248
};

/*******************************************************************/
int
#ifdef _FLAT32
IsUpper
#else 
isupper 
#endif /* _FLAT32 */
(int n) 
{
    unsigned int m = _2UC(n);
    if _CHECK_RANGE(m)
	{
        if ((_xctype[m] & _UPPER) != 0) 
			return True;
	}
	return False;
}

/*******************************************************************/
int
#ifdef _FLAT32
IsLower
#else 
islower 
#endif /* _FLAT32 */
(int n) 
{
    unsigned int m = _2UC(n);
    if _CHECK_RANGE(m)
	{
        if ((_xctype[m] & _LOWER) != 0) 
			return True;
	}
	return False;
}

/*******************************************************************/
int  
#ifdef _FLAT32
IsPunct
#else 
ispunct 
#endif /* _FLAT32 */
(int n) 
{
    unsigned int m = _2UC(n);
    if _CHECK_RANGE(m)
	{
        if ((_xctype[m] & _PUNCT) != 0) 
			return True;
	}
	return False;
}

/*******************************************************************/
int  
#ifdef _FLAT32
IsAlnum
#else 
isalnum 
#endif /* _FLAT32 */
        (int n) {
#ifdef _FLAT32
  return (int)(IsAlpha(n) || IsDigit(n));
#else
  return (int)(isalpha(n) || isdigit(n));
#endif /* _FLAT32 */ 
}

/*******************************************************************/
int  
#ifdef _FLAT32
IsAlpha
#else 
isalpha 
#endif /* _FLAT32 */
	(int n) 
{
#ifdef _FLAT32
	if (IsUpper(n) || IsLower(n)) 
#else
	if (isupper(n) || islower(n)) 
#endif /* _FLAT32 */ 
		return True;
	return False;
}

/*******************************************************************/
int  
#ifdef _FLAT32
ToUpper
#else 
toupper 
#endif /* _FLAT32 */
(int n) 
{
    unsigned int m = _2UC(n);
#ifdef _FLAT32
	if (IsAlpha(n))
#else
    if (isalpha(n))
#endif /* _FLAT32 */ 
	{
#if HALF_TABLE
		if (m > 0x7f)
			return (int)_xupper[m&0x7f];
		else if (m >= 'a' && m <= 'z')
			return m - 0x20;
#else
		return (int)_xupper[m];
#endif /* HALF_TABLE */
	}
	return n;
}

/*******************************************************************/
int  
#ifdef _FLAT32
ToLower
#else 
tolower 
#endif /* _FLAT32 */
(int n) 
{
    unsigned int m = _2UC(n);
#ifdef _FLAT32
	if (IsAlpha(n))
#else
    if (isalpha(n))
#endif /* _FLAT32 */ 
	{
 #if HALF_TABLE
		if (m > 0x7f)
			return (int)_xlower[m&0x7f];
		else if (m >= 'A' && m <= 'Z')
			return m + 0x20;
#else
		return (int)_xlower[m];
#endif
	}
    return n;
}

/*******************************************************************/
char *  
#ifdef _FLAT32
StrLwr
#else
strlwr
#endif /* _FLAT32 */
(char * str) 
{
  char *  buf = str;
  if (str)
  {
		while (*str != _ZTERM) 
		{
			*str = 
#ifdef _FLAT32
			(char)ToLower((int)*str);
#else
			(char)tolower((int)*str);
#endif /* _FLAT32 */
            str++;
		}
	}
	return buf;
}

/*******************************************************************/
char *
#ifdef _FLAT32
StrUpr
#else
strupr
#endif /* _FLAT32 */
(char * str) 
{
	char *  buf = str;
	if (str)
	{
		while (*str != _ZTERM) 
		{
			*str =
#ifdef _FLAT32
			(char)ToUpper((int)*str);
#else
			(char)toupper((int)*str);
#endif /* _FLAT32 */
            str++;
		}
	}
	return buf;
}

/*******************************************************************/

int IsDigit (int n) 
 {
#ifdef _WIN32
	if (((unsigned int)n) < 0x7f)
    {
		return isdigit(n);
	}
	return 0;
#else
	return (int)isdigit(n);
#endif
 }

/*******************************************************************/

int	  IsSpace (int n)
{
#ifdef _WIN32
	if (((unsigned int)n) < 0x7f)
    {
		return isspace(n);
	}
	return 0;
#else
	return (int)isspace(n);
#endif
}

